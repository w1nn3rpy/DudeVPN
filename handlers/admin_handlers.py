import asyncio
from decouple import config
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, Union
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from create_bot import bot, logger
from database.db_servers import get_all_servers
from keyboards.inline_kbs import cancel_fsm_kb, main_inline_kb
from keyboards.admin_keyboards import admin_actions_kb, target_for_spam_kb, add_del_promo_kb, select_server_location_kb, \
    add_server_kb
from database.db_admin import add_promo, del_promo, get_all_users, get_all_subscribers, get_country_by_id, \
    get_countries, get_country_by_code, add_server
from lingo.template import MENU_TEXT
from utils.ssh_utils import execute_outline_server, get_data_from_output
from states.admin_states import Promo, SpamState, ServerActions

admin_router = Router()

async def delete_messages(event: Union[Message, CallbackQuery], count: int = 1):
    try:
        chat_id = event.from_user.id
        message_id = event.message.message_id if isinstance(event, CallbackQuery) else event.message_id

        for i in range(count):
            await bot.delete_message(chat_id=chat_id, message_id=message_id - i)

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')

class AddServerState(StatesGroup):
    waiting_for_server_data = State()
    store_data_for_execute = State()

@admin_router.callback_query(F.data == 'cancel_fsm')
async def cancel_fsm_handler(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await delete_messages(call)

    await call.message.answer(text=MENU_TEXT.format(username=call.from_user.full_name
                               if call.from_user.full_name
                               else call.from_user.username),
                               reply_markup=await main_inline_kb(call.from_user.id))

@admin_router.callback_query(F.data == 'admin_panel')
async def admin_panel_handler(call: CallbackQuery):
    await delete_messages(call)
    await call.message.answer('üëáüëáüëá–í—ã–±–∏—Ä–∞–πüëáüëáüëá', reply_markup=admin_actions_kb())


#####################################################################################################################

################################################ –ë–ª–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ #######################################################


@admin_router.callback_query(F.data == 'spamming')
async def spam_handler(call: CallbackQuery, state:FSMContext):
    await state.set_state(SpamState.waiting_for_message)
    await delete_messages(call)
    await call.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞, '
                                 '–º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å 1 —Ñ–æ—Ç–æ\n'
                                 '(–î–∞–ª—å—à–µ –±—É–¥–µ—Ç –≤—ã–±–æ—Ä –∫–æ–º—É –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É)',
                              reply_markup=cancel_fsm_kb())

@admin_router.message(SpamState.waiting_for_message)
async def spam_message_handler(event: Message|CallbackQuery, state: FSMContext):
    if isinstance(event, Message):
        await delete_messages(event, 2)
        if event.photo:
            photo_id = event.photo[-1].file_id
            caption = event.caption or '–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏'
            await state.update_data(spam_type='photo', caption=caption, photo_id=photo_id)
            await event.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üëáüëáüëá')
            await event.answer_photo(photo_id, caption=caption, reply_markup=target_for_spam_kb())
            await state.set_state(SpamState.process_spam)
        else:
            text = event.text
            await event.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üëáüëáüëá')
            await event.answer(text, reply_markup=target_for_spam_kb())
            await state.update_data(spam_type='text', message=text)
            await state.set_state(SpamState.process_spam)


@admin_router.callback_query(SpamState.process_spam)
async def spam_handler(call: CallbackQuery, state: FSMContext):

    get_message_counter = 0
    error_message_counter = 0
    await delete_messages(call, 2)
    data = await state.get_data()
    spam_type = data.get('spam_type')
    if call.data == 'spam_all':
        users = await get_all_users()
    elif call.data == 'spam_sub':
        users = await get_all_subscribers()

    if spam_type == 'photo':
        caption = data.get('caption')
        photo_id = data.get('photo_id')
        for user in users:
            user_id = user['user_id']
            try:
                await asyncio.sleep(0.5)
                await bot.send_photo(photo=photo_id, chat_id=user_id, caption=caption)
                get_message_counter += 1

            except Exception as e:
                logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ: {e}')
                error_message_counter += 1
                continue

    elif spam_type == 'text':
        message = data.get('message')
        for user in users:
            user_id = user['user_id']
            try:
                await asyncio.sleep(0.5)
                await bot.send_message(chat_id=user_id, text=message)
                get_message_counter += 1

            except Exception as e:
                logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
                error_message_counter += 1
                continue

    await call.message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n'
                              f'–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {get_message_counter} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n'
                              f'–°–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {error_message_counter} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n',
                              reply_markup=await main_inline_kb(call.from_user.id))

    await state.clear()


#####################################################################################################################

################################################ –ë–ª–æ–∫ –ø—Ä–æ–º–æ #######################################################

@admin_router.callback_query(F.data == 'add_del_promo_next_step')
async def add_del_promo(call: CallbackQuery, state: FSMContext):
    await delete_messages(call)
    await call.message.answer('‚¨áÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –∫–æ–ª-–≤–æ –¥–Ω–µ–π ‚¨áÔ∏è\n'
                              '–ü—Ä–∏–º–µ—Ä: "TestPromo 31" –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏\n'
                              '–ü—Ä–∏–º–µ—Ä: "TestPromo" –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', reply_markup=cancel_fsm_kb())

    await state.set_state(Promo.get_promo)

@admin_router.message(Promo.get_promo)
async def action_with_promo(message: Message, state: FSMContext):
    await state.update_data(promo_code=message.text.split())
    await message.answer(f'–í—ã –≤–≤–µ–ª–∏ <b>{message.text}</b>\n'
                         f'–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–º?', reply_markup=add_del_promo_kb())
    await state.set_state(Promo.action_with_promo)
    await delete_messages(message)

@admin_router.callback_query(Promo.action_with_promo)
async def add_or_del_promo(call: CallbackQuery, state: FSMContext):
    await delete_messages(call)
    promo_code_data = await state.get_data()
    if len(promo_code_data['promo_code']) == 2:
        promo_code, duration = promo_code_data['promo_code']
    else:
        promo_code = promo_code_data['promo_code'][0]
        duration = 0

    if call.data == 'add_promo':
        await add_promo(promo_code, int(duration))
        await call.message.answer(f'–ü—Ä–æ–º–æ–∫–æ–¥ "{promo_code}" –Ω–∞ {duration} –¥–Ω–µ–π –¥–æ–±–∞–≤–ª–µ–Ω')
        await state.clear()
        await call.message.answer('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', reply_markup=await main_inline_kb(call.from_user.id))
    elif call.data == 'del_promo':
        await del_promo(promo_code)
        await call.message.answer(f'–ü—Ä–æ–º–æ–∫–æ–¥ "{promo_code}" —É–¥–∞–ª–µ–Ω')
        await state.clear()
        await call.message.answer('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', reply_markup=await main_inline_kb(call.from_user.id))
    else:
        await state.clear()
        await call.message.answer_photo(config('START'),
                                        reply_markup=await main_inline_kb(call.from_user.id))

#####################################################################################################################

################################################ –ë–ª–æ–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ ####################################

@admin_router.callback_query(F.data == 'check_server')
async def check_server(call: CallbackQuery):
    await delete_messages(call)
    servers = await get_all_servers()

    if not servers:
        await call.message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤')
        return
    text_to_print = []

    for server in servers:
        server_id = server['server_id']
        country_id = server['country_id']
        server_ip = server['server_ip']
        active_users = server['active_users']
        max_users = server['max_users']

        country = await get_country_by_id(country_id)
        country_name = country['name']

        text_to_print.append(f'<b>ID</b>: {server_id}\n<b>–°—Ç—Ä–∞–Ω–∞</b>: {country_name}\n<b>IP</b>: {server_ip}\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>: {active_users}/{max_users}')

        full_text = '\n\n'.join(text_to_print)

        if len(full_text) < 4096:
            await call.message.answer(full_text)
            return

        else:
            for i in range(0, len(full_text), 4096):
                await call.message.answer(full_text[i:i + 4096])


@admin_router.callback_query(F.data == 'add_server')
async def add_server_func(call: CallbackQuery, state: FSMContext):
    await delete_messages(call)
    await call.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ip///user///password\n'
                              '–ü—Ä–∏–º–µ—Ä: 192.168.19.1///root///uJ1Ps0?a8MN', reply_markup=cancel_fsm_kb())
    await state.set_state(ServerActions.add_server)

@admin_router.message(ServerActions.add_server)
async def process_server_data(message: Message, state: FSMContext):
    await delete_messages(message, 2)
    server_data = message.text
    try:
        countries = await get_countries()
        ip, user, password = server_data.split('///')
        await state.update_data(ip=ip, user=user, password=password)
        await message.answer(f"–î–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞:\nIP: {ip}\nUser: {user}\nPassword: {password}\n"
                             f"\n–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã - –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞",
                             reply_markup=select_server_location_kb(countries))
        await state.set_state(ServerActions.select_country)
    except ValueError:
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')


@admin_router.callback_query(ServerActions.select_country)
async def select_server_location(call: CallbackQuery, state: FSMContext):

    server_data = await state.get_data()
    ip = server_data.get('ip')
    user = server_data.get('user')
    password = server_data.get('password')

    country_code = call.data.split('_')[-1]
    country_row = await get_country_by_code(country_code)
    country_id = country_row['id']
    country_name = country_row['name']
    await state.update_data(country_id=country_id, country_name=country_name, country_code=country_code)

    await call.message.answer(f"–î–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞:\nIP: {ip}\nUser: {user}\nPassword: {password}\n"
                              f"–°—Ç—Ä–∞–Ω–∞: {country_name}\n"
                              f"\n–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã - –≤–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "
                              f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞\n"
                              "<b>–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞: {—Å–∫–æ—Ä–æ—Å—Ç—å} / 4</b>\n"
                              "–ü—Ä–∏–º–µ—Ä: —Å–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ 300–º–ë–∏—Ç/—Å–µ–∫, 300 / 4 = 75\n"
                              "–ó–Ω–∞—á–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π = ~75",
                         reply_markup=cancel_fsm_kb())
    await state.set_state(ServerActions.input_max_users)

@admin_router.message(ServerActions.input_max_users)
async def input_max_users(message: Message|CallbackQuery, state: FSMContext):
    await delete_messages(message, 2) if isinstance(message, Message) else await delete_messages(message)
    if message.text.isdigit():
        max_users = int(message.text)
        await state.update_data(max_users=max_users)
        server_data = await state.get_data()
        country_name = server_data.get('country_name')
        ip = server_data.get('ip')
        user = server_data.get('user')
        password = server_data.get('password')
        await message.answer(f"–î–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞:\nIP: {ip}\nUser: {user}\nPassword: {password}\n"
                             f"–°—Ç—Ä–∞–Ω–∞: {country_name}\n"
                             f"–ú–∞–∫—Å. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {max_users}\n"
                             f"\n–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.",
                             reply_markup=add_server_kb())
        await state.set_state(ServerActions.setup_new_server)


@admin_router.callback_query(ServerActions.setup_new_server)
async def execute_server(call: CallbackQuery, state: FSMContext):
    await delete_messages(call)
    data = await state.get_data()
    country_id = int(data.get('country_id'))
    ip = data.get('ip')
    user = data.get('user')
    password = data.get('password')
    max_users = int(data.get('max_users'))

    try:
        await call.message.answer('–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Outline...\n'
                                  '<b>!!!–í–ê–ñ–ù–û!!!</b>\n'
                                  '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ\n'
                                  '–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏: ~3 –º–∏–Ω—É—Ç—ã\n'
                                  '–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')

        output, errors = await execute_outline_server(host=ip, user=user, password=password)

        if errors:
            await call.message.answer(f'–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –æ—à–∏–±–∫–∏:\n'
                                 f'\n{errors}', reply_markup=await main_inline_kb(call.from_user.id))
            await state.clear()
            return

        if output:
            try:
                all_output, api_url, cert_sha256, management_port, access_key_port = get_data_from_output(output)
                await add_server(country_id, ip, password, api_url, cert_sha256, True,
                                 max_users, access_key_port, management_port)

                await call.message.answer('–§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞.\n'
                                     f'–í–µ—Å—å –≤—ã–≤–æ–¥: <code>{all_output[0]}</code> (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)\n'
                                     f'\napi_url={api_url}\n'
                                     f'cert_sha256={cert_sha256}\n'
                                     f'management_port={management_port}\n'
                                     f'access_key_port={access_key_port}')

                await state.clear()

            except Exception as e:
                await call.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ get_data_from_output:\n'
                                     f'Error: {str(e)}')
                await state.clear()


    except Exception as e:
        await call.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
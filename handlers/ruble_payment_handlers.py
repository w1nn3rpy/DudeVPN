from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, Union
from create_bot import bot, logger
from database.db_servers import edit_server_active_users_count
from database.db_users import get_user_info, get_user_referral_system_by_id, new_referral_balance_db, set_user_vpn_key, \
    set_for_subscribe, extension_subscribe
from keyboards.inline_kbs import main_inline_kb, apps_kb
from lingo.template import MENU_TEXT
from outline.main import OutlineConnection
from payment.yookassa_api import create_payment, check_status
from states.payment_states import Buy

from keyboards.payment_keyboards import accept_or_not_kb, pay_kb, payed_kb

ruble_payment_router = Router()

class MessageWithPayLink:
    msg_id = None

    async def delete(self):
        if self.msg_id:
            try:
                await bot.delete_message(chat_id=self.msg_id.chat.id, message_id=self.msg_id.message_id)
                self.msg_id = None
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        else:
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

async def delete_messages(event: Union[Message, CallbackQuery], count: int = 1):
    try:
        chat_id = event.from_user.id
        message_id = event.message.message_id if isinstance(event, CallbackQuery) else event.message_id

        for i in range(count):
            await bot.delete_message(chat_id=chat_id, message_id=message_id - i)

    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')

@ruble_payment_router.callback_query(F.data == 'cancel_fsm')
async def cancel_fsm_handler(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await delete_messages(call)

    await call.message.answer(text=MENU_TEXT.format(username=call.from_user.full_name
                               if call.from_user.full_name
                               else call.from_user.username),
                               reply_markup=await main_inline_kb(call.from_user.id))

#####################################################################################################################

################################################ –ë–ª–æ–∫ –ø–æ–∫—É–ø–∫–∏ #######################################################

@ruble_payment_router.callback_query(Buy.get_email_for_check)
async def get_email_handler(event: Message | CallbackQuery, state: FSMContext):
    if isinstance(event, Message):
        email = event.text
        await state.update_data(email=email)

    await delete_messages(event, 2 if isinstance(event, Message) else 1)

    method_name = {
        'sbp': '–°–ë–ü',
        'tinkoff_bank': 'T-Pay',
        'sberbank': 'SberPay',
        'bank_card': '–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π'
    }

    data = await state.get_data()
    referral_data = await get_user_referral_system_by_id(event.from_user.id)
    referral_balance = referral_data['current_balance']
    payment_method = data['payment_method']
    country_name = data['country_name']
    sub_time = data['sub_time']
    await state.set_state(Buy.confirm_payment_ruble)

    if 0 < referral_balance < data['price']:
        price = data['price'] - referral_balance
        new_referral_balance = 0
        await state.update_data(new_referral_balance=new_referral_balance)
    elif 0 < referral_balance > data['price']:
        price = 1
        new_referral_balance = referral_balance - data['price']
        await state.update_data(new_referral_balance=new_referral_balance)
    else:
        price = data['price']

    await event.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏:\n'
                               f'–°—Ç—Ä–∞–Ω–∞: <b>{country_name}</b>\n'
                               f'–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{sub_time} –º–µ—Å.</b>\n'
                               f'–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {method_name[payment_method]}\n'
                               f'\n–ö –æ–ø–ª–∞—Ç–µ: {int(price)} {'‚ÇΩ'} \n'
                               f'{f'<i>({referral_balance}—Ä. –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ —Å –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞)</i>'
                               if referral_balance > 0 else ''}\n',
                               reply_markup=accept_or_not_kb())


@ruble_payment_router.callback_query(Buy.confirm_payment_ruble)
async def ruble_pay_handler(call: CallbackQuery, state: FSMContext):
    await delete_messages(call)
    if call.data == 'accept':

        data = await state.get_data()
        country_name = data['country_name']
        sub_time = data['sub_time']
        price = int(data['price'])
        payment_method = data['payment_method']
        email = data.get('email', None)

        referral_data = await get_user_referral_system_by_id(call.from_user.id)
        referral_balance = referral_data['current_balance']
        if email:
            payment_url, payment_id = create_payment(payment_method, price, email)
        else:
            payment_url, payment_id = create_payment(payment_method, price)

        await state.update_data(payment_id=payment_id, payment_url=payment_url, referral_balance=referral_balance)
        message = await call.message.answer(f'–°—Ç—Ä–∞–Ω–∞: <b>{country_name}</b>\n'
                                            f'–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{sub_time} –º–µ—Å.</b>\n'
                                            f'\n–ö –æ–ø–ª–∞—Ç–µ: {int(price)} —Ä—É–±–ª–µ–π {f'({referral_balance}—Ä. '
                                                                               f'–±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ —Å –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞)' if referral_balance else ''}\n'
                                            '\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã üëá\n'
                                            '(–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ - 10 –º–∏–Ω—É—Ç)',
                                            reply_markup=pay_kb(payment_url))

        MessageWithPayLink.msg_id = message

        await call.message.answer('\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–Ø –æ–ø–ª–∞—Ç–∏–ª(-–∞)"', reply_markup=payed_kb())

        await state.set_state(Buy.check_payment_ruble)

    else:
        await state.clear()
        await call.message.answer('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é', reply_markup=await main_inline_kb(call.from_user.id))


@ruble_payment_router.callback_query(Buy.check_payment_ruble)
async def check_ruble_pay_handler(call: CallbackQuery, state: FSMContext):
    await delete_messages(call)
    message_with_pay_link = MessageWithPayLink()

    user_data = await get_user_info(call.from_user.id)
    is_subscriber = user_data['is_subscriber']

    if call.data == 'payed':
        data = await state.get_data()
        payment_id = data['payment_id']
        sub_time = data['sub_time']
        new_referral_balance = data['new_referral_balance']

        if check_status(payment_id) is True:
            await new_referral_balance_db(call.from_user.id, new_referral_balance)
            await message_with_pay_link.delete()

            if is_subscriber is False:
                try:
                    server_id = data['server_id']
                    server_api = data['server_api']
                    server_cert = data['server_cert']

                    client = OutlineConnection(server_api, server_cert)
                    key = client.create_new_key(str(call.from_user.id), call.from_user.username if call.from_user.username else str(call.from_user.id)).access_url

                    await set_user_vpn_key(call.from_user.id, key)
                    await set_for_subscribe(call.from_user.id, sub_time * 31, server_id)
                    await edit_server_active_users_count(server_id, 'add')

                    await call.message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n'
                                              f'–í–∞—à –∫–ª—é—á: <code>{key}</code>\n'
                                              f'\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
                                              reply_markup=apps_kb())
                    await state.clear()

                except Exception as e:
                    logger.error(f'–û—à–∏–±–∫–∞ –≤ {__name__}: {e}')

            else:
                await extension_subscribe(call.from_user.id, sub_time * 31)
                await call.message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏!\n'
                                          '–ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –¥–ª—è –í–∞—Å ‚ù§Ô∏è\n'
                                          '\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /start')
                await state.clear()

        else:
            await call.message.answer('–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∞–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è '
                                      '–ª–∏–±–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
                                      reply_markup=payed_kb())

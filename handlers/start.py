from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, KeyboardButton, ReplyKeyboardRemove
from keyboards.all_kb import main_kb, buy_button, home
from keyboards.inline_kbs import (support_kb, profile_kb, select_time_kb,
                                  server_select, accept_or_not, want_to_test, add_del_promo)
from create_bot import bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from db_handler.db_class import *

from payment.main import *


start_router = Router()


class Form(StatesGroup):
    promokod = State()


async def del_call_kb(call: CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        await bot.edit_message_reply_markup(
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            reply_markup=None
        )
    except Exception as E:
        print(E)


@start_router.message(CommandStart())
async def cmd_start(message: Message):
    result = await get_user_info(message.from_user.id, 2)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∞ is_admin [True/False]
    await message.answer('–ü—Ä–∏–≤–µ—Ç, —è - DudeVPN –±–æ—Ç. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π VPN –ø–æ –Ω–∏–∑–∫–∏–º —Ü–µ–Ω–∞–º\n'
                         '–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=main_kb(result))
    if not await get_user_info(message.from_user.id):
        await new_user(message.from_user.id, message.from_user.username)


@start_router.message(F.text == 'üî• –ê–¥–º–∏–Ω–∫–∞')
async def add_del_promos(message: Message):
    await message.answer('–í—ã–±–∏—Ä–∞–π', reply_markup=add_del_promo())


@start_router.message(F.text.in_({'‚úåÔ∏è –û –Ω–∞—à–µ–º VPN', '/about'}))
async def about(message: Message):
    await message.answer('–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –≤—ã–¥–∞—á–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
                         '–∫–ª—é—á–∞–º–∏ –¥–ª—è Outline VPN.\n'
                         '–ù–∞—à —Å–µ—Ä–≤–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥–∞—Ö, –∏–º–µ–µ—Ç –Ω–∏–∑–∫–∏–π –ø–∏–Ω–≥ –∏ –≤—ã—Å–æ–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å!\n'
                         '–ê —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ - –Ω–∞—à VPN –¥–µ—à–µ–≤—ã–π –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∂–¥–æ–º—É!',
                         reply_markup=buy_button())


@start_router.message(F.text.in_({'üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '/help'}))
async def sup(message: Message):
    await message.answer('–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –µ—Å–ª–∏ —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–æ–±–ª–µ–º–æ–π\n'
                         '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–¥–µ—Ç –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫ –Ω–æ–≤—ã–º, –ø–æ—ç—Ç–æ–º—É —Ñ–ª—É–¥–∏—Ç—å –≤ –ª—Å –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞.',
                         reply_markup=support_kb())


@start_router.message(F.text.in_({'üë§ –ü—Ä–æ—Ñ–∏–ª—å', '/profile'}))
async def profile(message: Message):
    await message.answer('üë§ –ü—Ä–æ—Ñ–∏–ª—å\n'
                         f'‚îú <b>–ò–î</b>: {message.from_user.id}\n'
                         f'‚îî <b>–ù–∏–∫–Ω–µ–π–º</b>: @{message.from_user.username}',
                         reply_markup=profile_kb())


@start_router.message(F.text == '–î–æ–º–æ–π üè†')
async def go_home(message: Message):
    await message.answer('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', reply_markup=main_kb(
        await get_user_info(message.from_user.id, 2)))


@start_router.callback_query(F.data == 'to_catalog')
async def server(call: CallbackQuery):
    await del_call_kb(call)
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä', reply_markup=server_select())


@start_router.callback_query(F.data == 'get_home')
async def to_homepage(call: CallbackQuery):
    await del_call_kb(call)
    await call.message.answer('–î–æ–º–æ–π üè†', reply_markup=main_kb(
        await get_user_info(call.from_user.id, 2)
    ))


@start_router.message(F.text.in_({'üõí –ö—É–ø–∏—Ç—å VPN', '/buy'}))
async def server(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä', reply_markup=server_select())


@start_router.callback_query(F.data == 'netherlands_server')
async def buy(call: CallbackQuery):
    await del_call_kb(call)
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏', reply_markup=select_time_kb())


@start_router.callback_query(F.data.in_({'one_month', 'three_months', 'six_months'}))
async def price(call: CallbackQuery):
    await del_call_kb(call)
    price_dict = {'one_month': 150,
                  'three_months': 400,
                  'six_months': 650}
    await call.message.answer(
        f'–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: {price_dict[call.data]}—Ä.\n'
        '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?',
        reply_markup=accept_or_not(price_dict[call.data])
    )


@start_router.callback_query(F.data.in_({'accept 150', 'accept 400', 'accept 650', 'cancel'}))
async def result_of_buy(call: CallbackQuery):
    result = call.data.split()
    await del_call_kb(call)
    if result[0] == 'accept':
        link, label = payment(int(result[1]), str(call.from_user.id)+str(data_for_individual_label))
        await add_label(call.from_user.id, label)
        await call.message.answer(f'–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏:\n{link}')
        await call.message.answer('–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç "–û–ø–ª–∞—Ç–∏–ª" –ª–∏–±–æ "–û–ø–ª–∞—Ç–∏–ª–∞"', callback_dataa=result[1])

    else:
        await call.message.answer('–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå.\n–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.',
                                  reply_markup=main_kb(await get_user_info(call.message.from_user.id, 2)))


@start_router.message(F.text.lower().in_({'–æ–ø–ª–∞—Ç–∏–ª', '–æ–ø–ª–∞—Ç–∏–ª–∞'}))
async def check_payment_handler(message: Message):
    payment_label = await get_user_info(message.from_user.id, 7)
    result = check_payment(payment_label)
    if result is not False:
        amount = {150: 1, 450: 3, 650: 6}
        await set_for_subscribe(message.from_user.id, amount[result])
        await message.answer('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
    else:
        await message.answer('–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –ª–∏–±–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.')


@start_router.message(F.text == 'üî•–•–æ—á—É —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥!üî•')
async def want_test(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=want_to_test())


@start_router.callback_query(F.data == 'promo')
async def promik(call: CallbackQuery, state: FSMContext):
    await del_call_kb(call)
    await call.message.answer('‚¨áÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ ‚¨áÔ∏è', reply_markup=home())
    await state.set_state(Form.promokod)


@start_router.message(F.text, Form.promokod)
async def check_promo(message: Message, state: FSMContext):
    await state.update_data(promokod=message.text)
    await message.answer('–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è... ‚è≥')
    data = await state.get_data()
    promo = (data['promokod'])
    if get_promo(promo) is True:
        await message.answer(f'–ü—Ä–æ–º–æ–∫–æ–¥ {promo} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! üî•\n'
                             '–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 7 –¥–Ω–µ–π.\n'
                             '–û–∂–∏–¥–∞–π—Ç–µ –∫–ª—é—á –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é', reply_markup=home())
        await state.clear()
    else:
        await message.answer('–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        await message.answer('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', reply_markup=main_kb(
            await get_user_info(message.from_user.id, 2)))


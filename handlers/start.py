from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, ContentType
from keyboards.inline_kbs import *
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import BotCommand, BotCommandScopeDefault

from db_handler.db_class import *

from payment.main import *

from outline.main import *

start_router = Router()


async def set_commands():
    commands = [BotCommand(command='start', description='–°—Ç–∞—Ä—Ç'),
                BotCommand(command='buy', description='–ö—É–ø–∏—Ç—å VPN')]
    await bot.set_my_commands(commands, BotCommandScopeDefault())


class LinkMsg:
    msg = None


class Form(StatesGroup):
    promokod = State()
    admin_promokod = State()
    send_payscreen = State()


async def del_call_kb(call: CallbackQuery, *param: bool):
    """
    –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        await bot.delete_message(
            chat_id=call.from_user.id,
            message_id=call.message.message_id
        )
        if param:
            await bot.delete_message(
                chat_id=call.from_user.id,
                message_id=LinkMsg.msg.message_id
            )
            LinkMsg.msg = None

    except Exception as E:
        print(E)


async def del_message_kb(message: Message, *param):
    """
    –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    2-–π –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç 'True' = —É–¥–∞–ª–µ–Ω–∏–µ 5-–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    try:
        if param:
            await bot.delete_messages(
                chat_id=message.from_user.id,
                message_ids=[message.message_id - 3, message.message_id - 2,
                             message.message_id - 1, message.message_id, message.message_id + 1]
            )
        else:
            await bot.delete_message(
                chat_id=message.from_user.id,
                message_id=message.message_id
            )

    except Exception as E:
        print(E)


async def confirm_pay(call, amount_month):
    check_old_key = await get_user_info(call.from_user.id, 4)
    check_to_admin = await get_user_info(call.from_user.id, 2)

    try:
        if check_old_key is not False:
            # key_id = await get_key_id_from_url(check_old_key)
            await delete_key(call.from_user.id)
            await set_for_unsubscribe(call.from_user.id)

        key = create_new_key(call.from_user.id, call.from_user.username).access_url
        await set_user_vpn_key(call.from_user.id, key)
        await call.message.answer_photo(
            'AgACAgIAAxkBAAIGombr7ILYRxgXcXAfS5MSqPqvLYeoAAJ43jEbiOpgS7c4tUhaqEoGAQADAgADeQADNgQ',
            f'–í–∞—à –∫–ª—é—á:\n <pre language="c++">{key}</pre>\n'
            f'\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
            reply_markup=apps())
        await call.message.answer('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ', reply_markup=guide())
        await set_for_subscribe(call.from_user.id, int(amount_month))
        await call.message.answer('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é', reply_markup=main_inline_kb(check_to_admin))

    except Exception as e:
        print(str(e))


async def confirm_pay_msg(message):
    check_old_key = await get_user_info(message.from_user.id, 4)
    try:
        if check_old_key is not False:
            key_id = await get_key_id_from_url(check_old_key)
            await delete_key(key_id)
            await set_for_unsubscribe(message.from_user.id)
    except Exception as e:
        print(str(e))

    key = create_new_key(message.from_user.id, message.from_user.username).access_url
    check_to_admin = await get_user_info(message.from_user.id, 2)
    await set_user_vpn_key(message.from_user.id, key)
    await message.answer_photo(
        'AgACAgIAAxkBAAIGombr7ILYRxgXcXAfS5MSqPqvLYeoAAJ43jEbiOpgS7c4tUhaqEoGAQADAgADeQADNgQ',
        f'–í–∞—à –∫–ª—é—á:\n <pre language="c++">{key}</pre>\n'
        f'\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
        reply_markup=apps())
    await message.answer('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ', reply_markup=guide())
    await message.answer('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é', reply_markup=main_inline_kb(check_to_admin))


@start_router.message(CommandStart())
async def cmd_start(message: Message):
    check_to_admin = await get_user_info(message.from_user.id, 2)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∞ is_admin [True/False]
    await message.answer_photo(
        'AgACAgIAAxkBAAIGmmbr60YDj4cbgOkyVzgF830kgpXaAAJn3jEbiOpgS9sv5zISetjwAQADAgADeQADNgQ',
        '–ü—Ä–∏–≤–µ—Ç, —è - DudeVPN –±–æ—Ç. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π VPN –ø–æ –Ω–∏–∑–∫–∏–º —Ü–µ–Ω–∞–º\n'
        '–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=main_inline_kb(check_to_admin))
    if not await get_user_info(message.from_user.id):
        await new_user(message.from_user.id, message.from_user.username)
    else:
        user_id, name, is_admin, is_sub, key, label, start_sub, end_sub = await get_user_info(message.from_user.id)
        if name != message.from_user.username:
            await update_username(message.from_user.id, message.from_user.username)


@start_router.message(Command('buy'))
async def cmd_buy(message: Message):
    await del_message_kb(message)
    await message.answer_photo(
        'AgACAgIAAxkBAAIGnGbr66cBeDGlY9b7DkKLeQOegh5TAAJu3jEbiOpgSwdxD9kp_CUiAQADAgADeQADNgQ',
        '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä', reply_markup=server_select())


@start_router.callback_query(F.data == 'adminka')
async def add_del_promos(call: CallbackQuery):
    await del_call_kb(call)
    await call.message.answer('–í—ã–±–∏—Ä–∞–π', reply_markup=admin_actions())


@start_router.callback_query(F.data == 'add_del_promo_next_step')
async def add_del_promo(call: CallbackQuery, state: FSMContext):
    await del_call_kb(call)
    await call.message.answer('‚¨áÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –∫–æ–ª-–≤–æ –Ω–µ–¥–µ–ª—å ‚¨áÔ∏è')
    await state.set_state(Form.admin_promokod)


@start_router.message(F.text, Form.admin_promokod)
async def action_with_promo(message: Message, state: FSMContext):
    await state.update_data(admin_promokod=message.text.split())
    await message.answer('–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–º?', reply_markup=add_del_promo_kb())
    await del_message_kb(message)


@start_router.callback_query(F.data, Form.admin_promokod)
async def add_or_del_promo(call: CallbackQuery, state: FSMContext):
    check_to_admin = await get_user_info(call.from_user.id, 2)
    await del_call_kb(call)
    fsm_data = await state.get_data()
    promo, time = fsm_data['admin_promokod']
    if call.data == 'add_promo':
        await add_promo(promo, int(time))
        await call.message.answer(f'–ü—Ä–æ–º–æ–∫–æ–¥ "{promo}" –Ω–∞ {time} –Ω–µ–¥–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω')
        await state.clear()
        await call.message.answer('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', reply_markup=main_inline_kb(check_to_admin))
    elif call.data == 'del_promo':
        await del_promo(promo)
        await call.message.answer(f'–ü—Ä–æ–º–æ–∫–æ–¥ "{promo}" —É–¥–∞–ª–µ–Ω')
        await state.clear()
        await call.message.answer('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', reply_markup=main_inline_kb(check_to_admin))


@start_router.callback_query(F.data == 'about')
async def about(call: CallbackQuery):
    await del_call_kb(call)
    await call.message.answer_photo(
        'AgACAgIAAxkBAAIGk2br6lpToHCw-NkbMFQKqdCPndkdAAJK4zEb-HxZS2wMfOdlWQ3xAQADAgADeQADNgQ',
        '–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –≤—ã–¥–∞—á–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n'
        '–∫–ª—é—á–∞–º–∏ –¥–ª—è Outline VPN.\n'
        '–ù–∞—à —Å–µ—Ä–≤–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥–∞—Ö, –∏–º–µ–µ—Ç –Ω–∏–∑–∫–∏–π –ø–∏–Ω–≥ –∏ –≤—ã—Å–æ–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å!\n'
        '–ê —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ - –Ω–∞—à VPN –¥–µ—à–µ–≤—ã–π –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∂–¥–æ–º—É!',
        reply_markup=about_buttons())


@start_router.callback_query(F.data == 'profile')
async def profile(call: CallbackQuery):
    await del_call_kb(call)
    user_id, name, is_admin, is_sub, key, label, start_sub, end_sub = await get_user_info(call.from_user.id)
    if name is not None:
        name = '@' + name
    if not is_sub:
        key = '–ù–µ—Ç –∫–ª—é—á–∞'
        await call.message.answer_photo(
            'AgACAgIAAxkBAAIGmGbr6sURo337__Np46tsG30XmfXgAAJg3jEbiOpgSymcDn4l7BmMAQADAgADeQADNgQ',
            'üë§ –ü—Ä–æ—Ñ–∏–ª—å\n'
            f'‚îú <b>–ò–î</b>: {user_id}\n'
            f'‚îú <b>–ù–∏–∫–Ω–µ–π–º</b>: {name}\n'
            f'‚îú <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>: ‚ùå\n'
            f'‚îî <b>–ö–ª—é—á</b>: {key}',
            reply_markup=profile_kb())
    else:
        await call.message.answer_photo(
            'AgACAgIAAxkBAAIGmGbr6sURo337__Np46tsG30XmfXgAAJg3jEbiOpgSymcDn4l7BmMAQADAgADeQADNgQ',
            'üë§ –ü—Ä–æ—Ñ–∏–ª—å\n'
            f'‚îú <b>–ò–î</b>: {call.from_user.id}\n'
            f'‚îú <b>–ù–∏–∫–Ω–µ–π–º</b>: {name}\n'
            f'‚îú <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>: ‚úÖ\n'
            f'‚îú <b>–ù–∞—á–∞–ª–æ –ø–æ–¥–ø–∏—Å–∫–∏</b>: {start_sub}\n'
            f'‚îú <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>: {end_sub}\n'
            f'‚îî <b>–ö–ª—é—á</b>:\n{key}',
            reply_markup=profile_kb())


@start_router.callback_query(F.data == 'get_home')
async def to_homepage(call: CallbackQuery):
    result = await get_user_info(call.from_user.id, 2)
    await del_call_kb(call)
    await call.message.answer_photo(
        'AgACAgIAAxkBAAIGmmbr60YDj4cbgOkyVzgF830kgpXaAAJn3jEbiOpgS9sv5zISetjwAQADAgADeQADNgQ',
        '–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é üè†', reply_markup=main_inline_kb(result))


@start_router.callback_query(F.data == 'buy')
async def server(call: CallbackQuery):
    await del_call_kb(call)
    await call.message.answer_photo(
        'AgACAgIAAxkBAAIGnGbr66cBeDGlY9b7DkKLeQOegh5TAAJu3jEbiOpgSwdxD9kp_CUiAQADAgADeQADNgQ',
        '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä', reply_markup=server_select())


@start_router.callback_query(F.data == 'netherlands_server')
async def buy(call: CallbackQuery):
    await del_call_kb(call)
    await call.message.answer_photo(
        'AgACAgIAAxkBAAIGnmbr6-pz1EPYnHJZCjzbujARy9nRAAJv3jEbiOpgS57c-ua-kWxIAQADAgADeQADNgQ',
        '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏', reply_markup=select_time_kb())


@start_router.callback_query(F.data.in_({'one_month', 'three_months', 'six_months'}))
async def price(call: CallbackQuery):
    await del_call_kb(call)
    price_dict = {'one_month': 150,
                  'three_months': 400,
                  'six_months': 650}
    await call.message.answer_photo(
        'AgACAgIAAxkBAAIGoGbr7C9IWJn2fz9uCB98bX6CZ_LRAAJx3jEbiOpgSxbAl7od8PeeAQADAgADeQADNgQ',
        f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏</b>: {price_dict[call.data]}—Ä.\n'
        '\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>',
        reply_markup=select_payment_system(price_dict[call.data])
    )


@start_router.callback_query(F.data.in_({'yoomoney_150', 'yoomoney_400', 'yoomoney_650',
                                         'sbp_150', 'sbp_400', 'sbp_650',
                                         'card-transfer_150', 'card-transfer_400', 'card-transfer_650'}))
async def any_system_pay(call: CallbackQuery):
    price_dict = {'150': '1 –º–µ—Å—è—Ü',
                  '400': '3 –º–µ—Å—è—Ü–∞',
                  '650': '6 –º–µ—Å—è—Ü–µ–≤'}

    types_dict = {'yoomoney': '–ÆMoney (–≤–æ–∑–º–æ–∂–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è)',
                  'sbp': '–°–ë–ü (–ö–æ–º–∏—Å—Å–∏—è 0%)',
                  'card-transfer': '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É'}

    pay_type = call.data.split('_')[0]
    sum = call.data.split('_')[-1]
    await del_call_kb(call)

    await call.message.answer(f'<b>üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>: {types_dict.get(pay_type)}\n'
                              f'\n<b>üïì –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏</b>: {price_dict.get(sum)}\n'
                              f'\n<b>üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å</b>: {sum} —Ä—É–±–ª–µ–π', reply_markup=accept_or_not(pay_type, sum))


@start_router.callback_query(F.data.in_({'accept_yoomoney_150', 'accept_yoomoney_400', 'accept_yoomoney_650',
                                         'cancel'}))
async def result_yoomoney_pay(call: CallbackQuery):
    check_to_admin = await get_user_info(call.from_user.id, 2)
    result = call.data.split('_')
    await del_call_kb(call)
    if result[0] == 'accept':
        link, label = payment(int(result[2]), str(call.from_user.id) + math_date())
        print(f'–°–æ–∑–¥–∞–Ω –ª–µ–π–±–ª: {label}')
        await add_label(call.from_user.id, label)
        LinkMsg.msg = await call.message.answer(
            f'–í–Ω–∏–º–∞–Ω–∏–µ!\n–ë–∞–Ω–∫ –º–æ–∂–µ—Ç –≤–∑—ã–º–∞—Ç—å –∫–æ–º–∏—Å—Å–∏—é!\n'
            f'–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏:', reply_markup=pay(link))
        await call.message.answer(
            '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É\n',
            reply_markup=payed('yoomoney', result[-1]),
            callback_data=result[-1])

    else:
        await call.message.answer(
            '–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå.\n–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.',
            reply_markup=main_inline_kb(check_to_admin))


@start_router.callback_query(lambda c: c.data.startswith('confirm-pay_yoomoney_'))
async def check_payment_yoomoney(call: CallbackQuery):
    await del_call_kb(call)
    payment_label = await get_user_info(call.from_user.id, 5)
    result = check_payment(payment_label)
    if result is not False:
        amount = {145: 4, 388: 12, 630: 24}  # –ö–æ–ª-–≤–æ –Ω–µ–¥–µ–ª—å –∏—Å—Ö–æ–¥—è –∏–∑ —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã
        time_on = amount[result]
        await call.message.answer_photo(
            'AgACAgIAAxkBAAIGombr7ILYRxgXcXAfS5MSqPqvLYeoAAJ43jEbiOpgS7c4tUhaqEoGAQADAgADeQADNgQ',
            '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
        await confirm_pay(call=call, amount_month=time_on)
    else:
        await call.message.answer(
            '–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç, –ª–∏–±–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.',
            reply_markup=payed('yoomoney', 0))


@start_router.callback_query(F.data.in_({'accept_sbp_150', 'accept_sbp_400', 'accept_sbp_650',
                                         'accept_card-transfer_150', 'accept_card-transfer_400',
                                         'accept_card-transfer_650',
                                         'cancel'}))
async def result_sbp_pay(call: CallbackQuery):
    check_to_admin = await get_user_info(call.from_user.id, 2)
    result = call.data.split('_')
    payment_system = result[1]
    price = result[-1]
    number = None
    await del_call_kb(call)
    if result[0] == 'accept':
        if payment_system == 'sbp':
            number = f'<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>: {config('PHONE_NUMBER')}'
        elif payment_system == 'card-transfer':
            number = f'<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã</b>: {config('CARD_NUMBER')}'
        await call.message.answer('–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä')
        await call.message.answer(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:\n'
                                  f'\n<b>–°—É–º–º–∞</b>: {price}\n'
                                  f'{number}\n'
                                  f'<b>–ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è</b>: –¢.–ë–∞–Ω–∫ (–¢–∏–Ω—å–∫–æ—Ñ—Ñ)\n'
                                  f'<b>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è</b>: –î–º–∏—Ç—Ä–∏–π –û.')
        await call.message.answer('–°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"',
                                  reply_markup=payed(payment_system=payment_system, price=str(price)))

    else:
        await call.message.answer('–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå.\n–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.',
                                  reply_markup=main_inline_kb(check_to_admin))


@start_router.callback_query(F.data.in_({'confirm-pay_sbp_150', 'confirm-pay_sbp_400', 'confirm-pay_sbp_650',
                                         'confirm-pay_card-transfer_150', 'confirm-pay_card-transfer_400',
                                         'confirm-pay_card-transfer_650'}))
async def check_payment_sbp(call: CallbackQuery, state: FSMContext):
    await del_call_kb(call)
    await call.message.answer('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞')
    await state.set_state(Form.send_payscreen)


@start_router.message(F.photo, Form.send_payscreen)
async def handle_screen(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await bot.send_photo(5983514379, photo_id, caption=f'–ß–µ–∫ –æ—Ç:\n'
                                                       f'@{message.from_user.username}\n'
                                                       f'–ò–º—è: {message.from_user.full_name}\n'
                                                       f'ID: {message.from_user.id}',
                         reply_markup=accept_or_not_check(message.from_user.id))
    await message.answer('‚è≥ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, –æ–∂–∏–¥–∞–π—Ç–µ ‚è≥')
    await state.clear()


@start_router.callback_query(lambda c: c.data.startswith('accept-check_'))
async def confirm_check(call: CallbackQuery):
    user_id = call.data.split('_')[-1]
    time_subscribe = call.data.split('_')[1]
    await del_call_kb(call)
    await bot.send_photo(
        chat_id=user_id,
        photo='AgACAgIAAxkBAAIGombr7ILYRxgXcXAfS5MSqPqvLYeoAAJ43jEbiOpgS7c4tUhaqEoGAQADAgADeQADNgQ',
        caption='–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n'
                '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á!', reply_markup=get_key_kb(time_subscribe))
    await call.message.answer('–ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–ª–µ–Ω!')


@start_router.callback_query(lambda c: c.data.startswith('decline-check_'))
async def decline_check(call: CallbackQuery):
    user_id = call.data.split('_')[-1]
    check_to_admin = await get_user_info(call.from_user.id, 2)

    await del_call_kb(call)
    await bot.send_message(user_id, '–û—Ç–∫–∞–∑–∞–Ω–æ!', reply_markup=main_inline_kb(check_to_admin))
    await call.message.answer('–ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–ª–µ–Ω!')


@start_router.callback_query(lambda c: c.data.startswith('get-key_'))
async def check_is_confirmed(call: CallbackQuery):
    time_subscribe = call.data.split('_')[-1]
    await del_call_kb(call)
    await confirm_pay(call=call, amount_month=time_subscribe)


@start_router.callback_query(F.data == 'cancel_pay')
async def cancel_pay(call: CallbackQuery):
    check_to_admin = await get_user_info(call.from_user.id, 2)
    await del_call_kb(call, True)
    await del_label(call.from_user.id)
    await call.message.answer('–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå.\n–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.',
                              reply_markup=main_inline_kb(check_to_admin))


@start_router.callback_query(F.data == 'promo_step_2')
async def promik(call: CallbackQuery, state: FSMContext):
    await del_call_kb(call)
    await call.message.answer_photo(
        'AgACAgIAAxkBAAIGpGbr7SiMD4pANZ7LzLLZ1wPyWDULAAJ-3jEbiOpgSw8z0kOsql8SAQADAgADeQADNgQ',
        '‚¨áÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ ‚¨áÔ∏è', reply_markup=cancel_kb())
    await state.set_state(Form.promokod)


@start_router.message(F.text, Form.promokod)
async def check_promo(message: Message, state: FSMContext):
    await state.update_data(promokod=message.text)
    LinkMsg.msg = (await message.answer('–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è... ‚è≥'))
    data_promo = await state.get_data()
    promo = (data_promo['promokod'])
    promo_info = await pop_promo(promo)
    await del_message_kb(message)
    if promo_info is not False:
        await del_message_kb(message)
        promo_time = promo_info[1]
        await set_for_subscribe(message.from_user.id, promo_time)
        await message.answer(f'–ü—Ä–æ–º–æ–∫–æ–¥ {promo} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! üî•\n'
                             f'–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –Ω–∞ {promo_time} –Ω–µ–¥–µ–ª—å.\n'
                             '–û–∂–∏–¥–∞–π—Ç–µ –∫–ª—é—á –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é')
        await state.clear()
        await confirm_pay_msg(message)
    else:
        await del_message_kb(message, True)
        await message.answer('–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        await message.answer_photo(
            'AgACAgIAAxkBAAIGpGbr7SiMD4pANZ7LzLLZ1wPyWDULAAJ-3jEbiOpgSw8z0kOsql8SAQADAgADeQADNgQ',
            '‚¨áÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ ‚¨áÔ∏è', reply_markup=cancel_kb())
        await state.set_state(Form.promokod)


@start_router.callback_query(F.data == 'cancel_promo')
async def cancel_promo(call: CallbackQuery, state: FSMContext):
    check_to_admin = await get_user_info(call.from_user.id, 2)
    await state.clear()
    await del_call_kb(call)
    await del_message_kb(call.message, True)
    await call.message.answer('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é', reply_markup=main_inline_kb(check_to_admin))


@start_router.message(F.text)
async def nothing(message: Message):
    check_to_admin = await get_user_info(message.from_user.id, 2)
    await del_message_kb(message, True)
    await message.answer('Error 404', reply_markup=main_inline_kb(check_to_admin))


@start_router.callback_query(F.data)
async def anycalls(call: CallbackQuery):
    print(str(call.data))


@start_router.message(F.photo)
async def get_file_id(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    largest_photo = message.photo[-1]

    # –ü–æ–ª—É—á–∞–µ–º file_id —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    file_id = largest_photo.file_id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º file_id –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∞—Ç
    await message.answer(f"File ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {file_id}")

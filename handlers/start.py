from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from keyboards.inline_kbs import *
from create_bot import bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import BotCommand, BotCommandScopeDefault


from db_handler.db_class import *

from payment.main import *

from outline.main import *

start_router = Router()


async def set_commands():
    commands = [BotCommand(command='start', description='–°—Ç–∞—Ä—Ç')]
    await bot.set_my_commands(commands, BotCommandScopeDefault())


class LinkMsg:
    msg = None


class Form(StatesGroup):
    promokod = State()
    admin_promokod = State()


async def del_call_kb(call: CallbackQuery, *param: bool):
    """
    –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        await bot.delete_message(
            chat_id=call.from_user.id,
            message_id=call.message.message_id
        )
        if param:
            await bot.delete_message(
                chat_id=call.from_user.id,
                message_id=LinkMsg.msg.message_id
            )
            LinkMsg.msg = None

    except Exception as E:
        print(E)


async def del_message_kb(message: Message, *param):
    """
    –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    2-–π –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç 'True' = —É–¥–∞–ª–µ–Ω–∏–µ 5-–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    try:
        if param:
            await bot.delete_messages(
                chat_id=message.from_user.id,
                message_ids=[message.message_id - 3, message.message_id - 2,
                             message.message_id - 1, message.message_id, message.message_id + 1]
            )
        else:
            await bot.delete_message(
                chat_id=message.from_user.id,
                message_id=message.message_id
            )

    except Exception as E:
        print(E)


async def confirm_pay(call):
    key = create_new_key(call.from_user.id, call.from_user.username).access_url
    await set_user_vpn_key(call.from_user.id, key)
    await call.message.answer(f'–í–∞—à –∫–ª—é—á:\n \n{key}\n \n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n',
                              reply_markup=apps())
    await call.message.answer('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ', reply_markup=guide())


@start_router.message(CommandStart())
async def cmd_start(message: Message):
    check_to_admin = await get_user_info(message.from_user.id, 2)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∞ is_admin [True/False]
    await message.answer('–ü—Ä–∏–≤–µ—Ç, —è - DudeVPN –±–æ—Ç. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π VPN –ø–æ –Ω–∏–∑–∫–∏–º —Ü–µ–Ω–∞–º\n'
                         '–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=main_inline_kb(check_to_admin))
    if not await get_user_info(message.from_user.id):
        await new_user(message.from_user.id, message.from_user.username)
    else:
        user_id, name, is_admin, is_sub, key, label, start_sub, end_sub = await get_user_info(message.from_user.id)
        if name != message.from_user.username:
            await update_username(message.from_user.id, message.from_user.username)


@start_router.callback_query(F.data == 'adminka')
async def add_del_promos(call: CallbackQuery):
    await del_call_kb(call)
    await call.message.answer('–í—ã–±–∏—Ä–∞–π', reply_markup=admin_actions())


@start_router.callback_query(F.data == 'add_del_promo_next_step')
async def add_del_promo(call: CallbackQuery, state: FSMContext):
    await del_call_kb(call)
    await call.message.answer('‚¨áÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –∫–æ–ª-–≤–æ –Ω–µ–¥–µ–ª—å ‚¨áÔ∏è')
    await state.set_state(Form.admin_promokod)


@start_router.message(F.text, Form.admin_promokod)
async def action_with_promo(message: Message, state: FSMContext):
    await state.update_data(admin_promokod=message.text.split())
    await message.answer('–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–º?', reply_markup=add_del_promo_kb())
    await del_message_kb(message)


@start_router.callback_query(F.data, Form.admin_promokod)
async def add_or_del_promo(call: CallbackQuery, state: FSMContext):
    check_to_admin = await get_user_info(call.from_user.id, 2)
    await del_call_kb(call)
    fsm_data = await state.get_data()
    promo, time = fsm_data['admin_promokod']
    if call.data == 'add_promo':
        await add_promo(promo, int(time))
        await call.message.answer(f'–ü—Ä–æ–º–æ–∫–æ–¥ "{promo}" –Ω–∞ {time} –Ω–µ–¥–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω')
        await state.clear()
        await call.message.answer('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', reply_markup=main_inline_kb(check_to_admin))
    elif call.data == 'del_promo':
        await del_promo(promo)
        await call.message.answer(f'–ü—Ä–æ–º–æ–∫–æ–¥ "{promo}" —É–¥–∞–ª–µ–Ω')
        await state.clear()
        await call.message.answer('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.', reply_markup=main_inline_kb(check_to_admin))


@start_router.callback_query(F.data == 'about')
async def about(call: CallbackQuery):
    await del_call_kb(call)
    await call.message.answer('–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –≤—ã–¥–∞—á–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n'
                              '–∫–ª—é—á–∞–º–∏ –¥–ª—è Outline VPN.\n'
                              '–ù–∞—à —Å–µ—Ä–≤–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥–∞—Ö, –∏–º–µ–µ—Ç –Ω–∏–∑–∫–∏–π –ø–∏–Ω–≥ –∏ –≤—ã—Å–æ–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å!\n'
                              '–ê —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ - –Ω–∞—à VPN –¥–µ—à–µ–≤—ã–π –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∂–¥–æ–º—É!',
                              reply_markup=about_buttons())


@start_router.callback_query(F.data == 'help')
async def sup(call: CallbackQuery):
    await del_call_kb(call)
    await call.message.answer('–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –µ—Å–ª–∏ —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–æ–±–ª–µ–º–æ–π\n'
                              '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–¥–µ—Ç –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫ –Ω–æ–≤—ã–º, –ø–æ—ç—Ç–æ–º—É —Ñ–ª—É–¥–∏—Ç—å –≤ –ª—Å –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞.',
                              reply_markup=support_kb())


@start_router.callback_query(F.data == 'profile')
async def profile(call: CallbackQuery):
    await del_call_kb(call)
    user_id, name, is_admin, is_sub, key, label, start_sub, end_sub = await get_user_info(call.from_user.id)
    if name is not None:
        name = '@' + name
    if not is_sub:
        key = '–ù–µ—Ç –∫–ª—é—á–∞'
        await call.message.answer('üë§ –ü—Ä–æ—Ñ–∏–ª—å\n'
                                  f'‚îú <b>–ò–î</b>: {user_id}\n'
                                  f'‚îú <b>–ù–∏–∫–Ω–µ–π–º</b>: {name}\n'
                                  f'‚îú <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>: ‚ùå\n'
                                  f'‚îî <b>–ö–ª—é—á</b>: {key}',
                                  reply_markup=profile_kb())
    else:
        await call.message.answer('üë§ –ü—Ä–æ—Ñ–∏–ª—å\n'
                                  f'‚îú <b>–ò–î</b>: {call.from_user.id}\n'
                                  f'‚îú <b>–ù–∏–∫–Ω–µ–π–º</b>: @{call.from_user.username}\n'
                                  f'‚îú <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>: ‚úÖ\n'
                                  f'‚îú <b>–ù–∞—á–∞–ª–æ –ø–æ–¥–ø–∏—Å–∫–∏</b>: {start_sub}\n'
                                  f'‚îú <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>: {end_sub}\n'
                                  f'‚îî <b>–ö–ª—é—á</b>:\n{key}',
                                  reply_markup=profile_kb())


@start_router.callback_query(F.data == 'to_catalog')
async def server(call: CallbackQuery):
    await del_call_kb(call)
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä', reply_markup=server_select())


@start_router.callback_query(F.data == 'get_home')
async def to_homepage(call: CallbackQuery):
    result = await get_user_info(call.from_user.id, 2)
    await del_call_kb(call)
    await call.message.answer('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é üè†', reply_markup=main_inline_kb(result))


@start_router.callback_query(F.data == 'buy')
async def server(call: CallbackQuery):
    await del_call_kb(call)
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä', reply_markup=server_select())


@start_router.callback_query(F.data == 'netherlands_server')
async def buy(call: CallbackQuery):
    await del_call_kb(call)
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏', reply_markup=select_time_kb())


@start_router.callback_query(F.data.in_({'one_month', 'three_months', 'six_months'}))
async def price(call: CallbackQuery):
    await del_call_kb(call)
    price_dict = {'one_month': 150,
                  'three_months': 400,
                  'six_months': 650}
    await call.message.answer(
        f'–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: {price_dict[call.data]}—Ä.\n'
        '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?',
        reply_markup=accept_or_not(price_dict[call.data])
    )


@start_router.callback_query(F.data.in_({'accept 150', 'accept 400', 'accept 650', 'cancel'}))
async def result_of_buy(call: CallbackQuery):
    check_to_admin = await get_user_info(call.from_user.id, 2)
    result = call.data.split()
    await del_call_kb(call)
    if result[0] == 'accept':
        link, label = payment(int(result[1]), str(call.from_user.id) + str(data_for_individual_label))
        await add_label(call.from_user.id, label)
        LinkMsg.msg = await call.message.answer(f'–í–Ω–∏–º–∞–Ω–∏–µ!\n–ë–∞–Ω–∫ –º–æ–∂–µ—Ç –≤–∑—ã–º–∞—Ç—å –∫–æ–º–∏—Å—Å–∏—é!\n'
                                                f'–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏:', reply_markup=pay(link))
        await call.message.answer('–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É\n',
                                  reply_markup=payed(),
                                  callback_data=result[1])

    else:
        await call.message.answer('–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå.\n–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.',
                                  reply_markup=main_inline_kb(check_to_admin))


@start_router.callback_query(F.data == 'confirm_pay')
async def check_payment_handler(call: CallbackQuery):
    await del_call_kb(call)
    payment_label = await get_user_info(call.from_user.id, 5)
    result = check_payment(payment_label)
    if result is not False:
        amount = {145: 4, 436: 12, 630: 24}  # –ö–æ–ª-–≤–æ –Ω–µ–¥–µ–ª—å –∏—Å—Ö–æ–¥—è –∏–∑ —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã
        await set_for_subscribe(call.from_user.id, amount[result])
        await call.message.answer('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
        await confirm_pay(call=call)
    else:
        await call.message.answer('–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –ª–∏–±–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.',
                                  reply_markup=payed())


@start_router.callback_query(F.data == 'cancel_pay')
async def cancel_pay(call: CallbackQuery):
    check_to_admin = await get_user_info(call.from_user.id, 2)
    await del_call_kb(call, True)
    await del_label(call.from_user.id)
    await call.message.answer('–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå.\n–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.',
                              reply_markup=main_inline_kb(check_to_admin))


@start_router.callback_query(F.data == 'promo_step_1')
async def want_test(call: CallbackQuery):
    await del_call_kb(call)
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=want_to_test())


@start_router.callback_query(F.data == 'promo_step_2')
async def promik(call: CallbackQuery, state: FSMContext):
    await del_call_kb(call)
    await call.message.answer('‚¨áÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ ‚¨áÔ∏è', reply_markup=cancel_kb())
    await state.set_state(Form.promokod)


@start_router.message(F.text, Form.promokod)
async def check_promo(message: Message, state: FSMContext):
    check_to_admin = await get_user_info(message.from_user.id, 2)
    await state.update_data(promokod=message.text)
    LinkMsg.msg = (await message.answer('–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è... ‚è≥'))
    data_promo = await state.get_data()
    promo = (data_promo['promokod'])
    promo_info = await pop_promo(promo)
    await del_message_kb(message)
    if promo_info is not False:
        await del_message_kb(message)
        promo_time = promo_info[1]
        await set_for_subscribe(message.from_user.id, promo_time)
        await message.answer(f'–ü—Ä–æ–º–æ–∫–æ–¥ {promo} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! üî•\n'
                             f'–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –Ω–∞ {promo_time} –Ω–µ–¥–µ–ª—å.\n'
                             '–û–∂–∏–¥–∞–π—Ç–µ –∫–ª—é—á –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é', reply_markup=main_inline_kb(check_to_admin))
        await state.clear()
        await confirm_pay(call=message)
    else:
        await del_message_kb(message, True)
        await message.answer('–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        await message.answer('‚¨áÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ ‚¨áÔ∏è', reply_markup=cancel_kb())
        await state.set_state(Form.promokod)


@start_router.callback_query(F.data == 'cancel_promo')
async def cancel_promo(call: CallbackQuery, state: FSMContext):
    check_to_admin = await get_user_info(call.from_user.id, 2)
    await state.clear()
    await del_call_kb(call)
    await del_message_kb(call.message, True)
    await call.message.answer('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é', reply_markup=main_inline_kb(check_to_admin))


@start_router.message(F.text)
async def nothing(message: Message):
    check_to_admin = await get_user_info(message.from_user.id, 2)
    await del_message_kb(message, True)
    await message.answer('Error 404', reply_markup=main_inline_kb(check_to_admin))
